import json
from channels.generic.websocket import AsyncWebsocketConsumer
from django.utils import timezone
# from .models import Message, Room

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = self.scope['url_route']['kwargs']['room_name']
        self.room_group_name = f'chat_{self.room_name}'

        # Join room group
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        await self.accept()

        # await self.send(text_data=json.dumps({
        #     'message': 'Hello, you are connected 123!'
        # }))

    async def disconnect(self, close_code):
        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    async def receive(self, text_data):
        text_data_json = json.loads(text_data)
        message = text_data_json['message']
        username = text_data_json['username']
        time_sent = timezone.now().strftime('%H:%M:%S %d/%m/%Y')

        # Send message to room group
        await self.channel_layer.group_send(
            self.room_group_name,
            {   
                'type': 'chat_message',
                'message': message,
                'username': username,
                'time': time_sent
            }
        )

    async def chat_message(self, event):
        message = event['message']
        username = event['username']
        time = event['time']

        # Send message to WebSocket
        await self.send(text_data=json.dumps({
            'message': message,
            'username': username,
            'time': time
        }))



# class ChatConsumer(AsyncWebsocketConsumer):
#     async def receive(self, text_data):
#         text_data_json = json.loads(text_data)
#         message = text_data_json['message']
#         username = text_data_json['username']

#         room = await database_sync_to_async(Room.objects.get)(name=self.room_name) # type: ignore
#         new_message = Message(value=message, user=username, room=room)
#         await database_sync_to_async(new_message.save)() # type: ignore

#         # Send message to room group
#         await self.channel_layer.group_send(
#             self.room_group_name,
#             {
#                 'type': 'chat_message',
#                 'message': message,
#                 'username': username,
#                 'time': timezone.now().strftime('%H:%M:%S %d/%m/%Y')
#             }
#         )
